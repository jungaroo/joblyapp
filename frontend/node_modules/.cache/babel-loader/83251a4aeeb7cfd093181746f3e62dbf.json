{"ast":null,"code":"import _objectWithoutProperties from \"/Users/orlando/Projects/Rithm/Projects/jobly/jobly/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/Users/orlando/Projects/Rithm/Projects/jobly/jobly/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport axios from 'axios';\nexport default class JoblyApi {\n  static async request(endpoint, paramsOrData = {}, verb = \"get\") {\n    paramsOrData._token = localStorage.getItem('token');\n    console.debug(\"API Call:\", endpoint, paramsOrData, verb);\n\n    try {\n      return (await axios({\n        method: verb,\n        url: \"http://localhost:3001/\".concat(endpoint),\n        [verb === \"get\" ? \"params\" : \"data\"]: paramsOrData\n      })).data; // axios sends query string data via the \"params\" key,\n      // and request body data via the \"data\" key,\n      // so the key we need depends on the HTTP verb\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  static async loginUser(username, password) {\n    let res = await this.request('login', {\n      username: username || 'testuser',\n      password: password || 'secret'\n    }, 'post');\n    return [res.token, username];\n  }\n  /** Pulling data from API  */\n\n\n  static async getCompany(handle) {\n    let res = await this.request(\"companies/\".concat(handle));\n    return res.company;\n  }\n\n  static async getCompanies() {\n    let res = await this.request(\"companies/\");\n    return res.companies;\n  }\n\n  static async getJobs() {\n    let res = await this.request('jobs');\n    return res.jobs;\n  }\n\n  static async search(path, search) {\n    let res = await this.request(\"\".concat(path, \"?search=\").concat(search));\n    return res[path];\n  }\n\n  static async registerUser(user) {\n    let res = await this.request(\"users\", user, 'post');\n    return [res.token, user.username];\n  }\n\n  static async updateUser(username, body) {\n    let res = await this.request(\"users/\".concat(username), _objectSpread({}, body), 'patch');\n    return res.user.username;\n  }\n\n  static async getUser(user) {\n    let res = await this.request(\"users/\".concat(user));\n\n    let _res$user = res.user,\n        username = _res$user.username,\n        password = _res$user.password,\n        info = _objectWithoutProperties(_res$user, [\"username\", \"password\"]);\n\n    return info;\n  }\n\n  static async applyToJob(jobid, username, state) {\n    let body = {\n      username,\n      // user name\n      state // applied\n\n    };\n    let res = await this.request(\"jobs/\".concat(jobid, \"/apply\"), body, 'post');\n    return res.message;\n  }\n\n}","map":{"version":3,"sources":["/Users/orlando/Projects/Rithm/Projects/jobly/jobly/src/JoblyApi.js"],"names":["axios","JoblyApi","request","endpoint","paramsOrData","verb","_token","localStorage","getItem","console","debug","method","url","data","err","error","response","message","Array","isArray","loginUser","username","password","res","token","getCompany","handle","company","getCompanies","companies","getJobs","jobs","search","path","registerUser","user","updateUser","body","getUser","info","applyToJob","jobid","state"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\n\nexport default class JoblyApi {\n  static async request(endpoint, paramsOrData = {}, verb = \"get\") {\n\n    paramsOrData._token = localStorage.getItem('token');\n\n    console.debug(\"API Call:\", endpoint, paramsOrData, verb);\n\n    try {\n      return (await axios({\n        method: verb,\n        url: `http://localhost:3001/${endpoint}`,\n        [verb === \"get\" ? \"params\" : \"data\"]: paramsOrData\n      })).data;\n      // axios sends query string data via the \"params\" key,\n      // and request body data via the \"data\" key,\n      // so the key we need depends on the HTTP verb\n    }\n\n    catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  static async loginUser(username, password) {\n    let res = await this.request('login', {\n      username: username || 'testuser',\n      password: password || 'secret',\n    }, 'post');\n    return  [res.token, username];\n  }\n\n  /** Pulling data from API  */\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  static async getCompanies() {\n    let res = await this.request(`companies/`);\n    return res.companies;\n  }\n\n  static async getJobs() {\n    let res = await this.request('jobs');\n    return res.jobs;\n  }\n  \n  static async search(path, search) {\n    let res = await this.request(`${path}?search=${search}`);\n    return res[path];\n  }\n\n  static async registerUser(user){\n    let res = await this.request(`users`, user, 'post');\n    return [res.token, user.username];\n  }\n  \n  static async updateUser(username, body){\n    let res = await this.request(`users/${username}`,{...body}, 'patch');\n    return res.user.username;\n  }\n\n  static async getUser(user){\n    let res = await this.request(`users/${user}`);\n    let {username, password, ...info} = res.user;\n    return info;\n  }\n\n  static async applyToJob(jobid, username, state) {\n    let body = {\n      username, // user name\n      state  // applied\n    };\n    let res = await this.request(`jobs/${jobid}/apply`, body, 'post');\n    return res.message;\n  }\n  \n}"]},"metadata":{},"sourceType":"module"}