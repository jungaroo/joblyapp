{"ast":null,"code":"import _objectSpread from \"/Users/orlando/Projects/Rithm/Projects/jobly/jobly/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/orlando/Projects/Rithm/Projects/jobly/jobly/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/orlando/Projects/Rithm/Projects/jobly/jobly/src/JobComponents/Jobs.js\";\nimport React, { Component } from 'react';\nimport uuid from 'uuid/v4';\nimport JoblyApi from '../JoblyApi.js';\nimport JobCard from './JobCard.js';\nimport Search from '../Search';\nimport { withRouter } from \"react-router\";\n\nclass Jobs extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jobs: [] // id, title, company-handle, salary, equity, state,\n\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleApplication = this.handleApplication.bind(this);\n  }\n\n  async componentWillMount() {\n    const username = localStorage.getItem('username'); // This will grab all the jobs available as well as the users\n\n    const promises = [JoblyApi.getJobs(), JoblyApi.getUser(username)];\n\n    let _ref = await Promise.all(promises),\n        _ref2 = _slicedToArray(_ref, 2),\n        jobs = _ref2[0],\n        user = _ref2[1];\n\n    const appliedJobIds = new Set(user.jobs.map(j => j.id));\n    jobs = jobs.map(job => {\n      return appliedJobIds.has(job.id) ? _objectSpread({}, job, {\n        key: uuid(),\n        applied: true\n      }) : _objectSpread({}, job, {\n        key: uuid(),\n        applied: false\n      });\n    });\n    this.setState({\n      jobs\n    });\n  }\n\n  async handleApplication(jobid) {\n    const username = localStorage.getItem('username');\n    await JoblyApi.applyToJob(jobid, username, 'applied');\n    let updatedJobs = this.state.jobs.map(j => {\n      if (j.id === +jobid) {\n        j.applied = true;\n      }\n\n      return j;\n    });\n    this.setState({\n      jobs: updatedJobs\n    });\n  }\n\n  async handleSubmit(search) {\n    let res = await JoblyApi.search('jobs', search);\n    this.setState({\n      jobs: res\n    });\n  }\n\n  render() {\n    const jobs = this.state.jobs; // each job is {id, title, company-handle, salary, equity, state}\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      style: {\n        color: \"white\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \" Jobs \"), React.createElement(Search, {\n      handleSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), jobs.map(c => React.createElement(JobCard, Object.assign({\n      handleApplication: this.handleApplication\n    }, c, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default withRouter(Jobs);","map":{"version":3,"sources":["/Users/orlando/Projects/Rithm/Projects/jobly/jobly/src/JobComponents/Jobs.js"],"names":["React","Component","uuid","JoblyApi","JobCard","Search","withRouter","Jobs","constructor","props","state","jobs","handleSubmit","bind","handleApplication","componentWillMount","username","localStorage","getItem","promises","getJobs","getUser","Promise","all","user","appliedJobIds","Set","map","j","id","job","has","key","applied","setState","jobid","applyToJob","updatedJobs","search","res","render","color","c"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport uuid from 'uuid/v4';\nimport JoblyApi from '../JoblyApi.js';\nimport JobCard from './JobCard.js';\nimport Search from '../Search';\nimport { withRouter } from \"react-router\";\n\n\nclass Jobs extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jobs: [] // id, title, company-handle, salary, equity, state,\n    }\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleApplication = this.handleApplication.bind(this);\n  }\n\n  async componentWillMount() {\n    const username = localStorage.getItem('username');\n    \n    // This will grab all the jobs available as well as the users\n    const promises = [JoblyApi.getJobs(), JoblyApi.getUser(username)];\n\n    let [jobs, user] = await Promise.all(promises);\n    const appliedJobIds = new Set(user.jobs.map(j => j.id));\n    \n    jobs = jobs.map(job => {\n      return appliedJobIds.has(job.id) ? \n        {...job, key: uuid(), applied: true} : \n        {...job, key: uuid(), applied: false} \n    });\n      \n    this.setState({ jobs });\n  }\n\n  async handleApplication(jobid) {\n    const username = localStorage.getItem('username');\n    await JoblyApi.applyToJob(jobid, username, 'applied');\n\n    let updatedJobs = this.state.jobs.map(j => {\n      if (j.id === +jobid) {\n        j.applied = true;\n      }\n      return j\n    });\n\n    this.setState({\n      jobs: updatedJobs\n    });\n\n  }\n\n  async handleSubmit(search) {\n    let res = await JoblyApi.search('jobs',search);\n    this.setState({jobs: res})\n  }\n\n  render(){\n    const { jobs } = this.state;\n \n    // each job is {id, title, company-handle, salary, equity, state}\n    return (\n      <div>\n        <h1 style={{ color: \"white\"}}> Jobs </h1>\n        <Search handleSubmit={this.handleSubmit} />\n        { jobs.map(c => <JobCard handleApplication={this.handleApplication} {...c} />) }\n        </div>\n    )\n  }\n}\n\nexport default withRouter(Jobs);\n"]},"metadata":{},"sourceType":"module"}